{
  
    
        "post0": {
            "title": "Outline",
            "content": "# Import required packages import numpy as np import pandas as pd %matplotlib inline import seaborn as sns import matplotlib.pyplot as plt import statsmodels.formula.api as smf from matplotlib import pyplot as plt from matplotlib.lines import Line2D %matplotlib inline . # Read required datasets df = pd.read_csv(&#39;ttb_county_clean.csv&#39;) df1 = pd.read_csv(&#39;df_panel_fix.csv&#39;) . # Motivation for Project # Real Purpose of Transfers df.plot(kind=&quot;scatter&quot;, x=&quot;longitude&quot;, y=&quot;latitude&quot;, alpha=0.4, s=df[&quot;specific&quot;]/100, label=&quot;Specific Purpose Transfers&quot;, figsize=(12,8), c=&quot;nightlights&quot;, cmap=plt.get_cmap(&quot;jet&quot;), colorbar=True, sharex=False) plt.legend() . &lt;matplotlib.legend.Legend at 0x7f352201d250&gt; . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; lin_reg = smf.ols(&#39;np.log(specific) ~ np.log(gdp) + np.log(fdi) + i + rnr + rr + C(province) + C(year)&#39;, data=df1).fit() lin_reg.summary() . OLS Regression Results Dep. Variable: np.log(specific) | R-squared: 0.815 | . Model: OLS | Adj. R-squared: 0.781 | . Method: Least Squares | F-statistic: 24.06 | . Date: Thu, 13 Aug 2020 | Prob (F-statistic): 8.01e-66 | . Time: 20:34:20 | Log-Likelihood: -181.04 | . No. Observations: 285 | AIC: 452.1 | . Df Residuals: 240 | BIC: 616.4 | . Df Model: 44 | | . Covariance Type: nonrobust | | . | coef std err t P&gt;|t| [0.025 0.975] . Intercept 14.7366 | 4.206 | 3.504 | 0.001 | 6.451 | 23.022 | . C(province)[T.Beijing] -0.0346 | 0.266 | -0.130 | 0.897 | -0.558 | 0.489 | . C(province)[T.Chongqing] -0.1765 | 0.488 | -0.362 | 0.718 | -1.137 | 0.784 | . C(province)[T.Fujian] -0.6959 | 0.261 | -2.669 | 0.008 | -1.210 | -0.182 | . C(province)[T.Gansu] -0.4626 | 0.620 | -0.746 | 0.456 | -1.684 | 0.759 | . C(province)[T.Guangdong] 1.3153 | 0.771 | 1.705 | 0.089 | -0.204 | 2.835 | . C(province)[T.Guangxi] -0.3288 | 0.288 | -1.142 | 0.255 | -0.896 | 0.239 | . C(province)[T.Guizhou] -0.6086 | 0.611 | -0.997 | 0.320 | -1.811 | 0.594 | . C(province)[T.Hainan] -1.8147 | 1.156 | -1.570 | 0.118 | -4.091 | 0.462 | . C(province)[T.Hebei] 0.5428 | 0.426 | 1.274 | 0.204 | -0.296 | 1.382 | . C(province)[T.Heilongjiang] 0.6145 | 0.214 | 2.865 | 0.005 | 0.192 | 1.037 | . C(province)[T.Henan] 0.6042 | 0.386 | 1.565 | 0.119 | -0.156 | 1.365 | . C(province)[T.Hubei] -0.0554 | 0.239 | -0.232 | 0.817 | -0.526 | 0.415 | . C(province)[T.Hunan] 0.4026 | 0.236 | 1.702 | 0.090 | -0.063 | 0.868 | . C(province)[T.Jiangsu] 0.4451 | 0.597 | 0.746 | 0.456 | -0.730 | 1.620 | . C(province)[T.Jiangxi] -0.1455 | 0.344 | -0.423 | 0.673 | -0.823 | 0.532 | . C(province)[T.Jilin] 0.1529 | 0.387 | 0.395 | 0.693 | -0.609 | 0.915 | . C(province)[T.Liaoning] -4.241e-16 | 2.15e-16 | -1.969 | 0.050 | -8.48e-16 | 2.01e-19 | . C(province)[T.Ningxia] -1.8168 | 1.255 | -1.448 | 0.149 | -4.288 | 0.655 | . C(province)[T.Qinghai] -1.8143 | 1.325 | -1.369 | 0.172 | -4.425 | 0.797 | . C(province)[T.Shaanxi] -0.8817 | 0.318 | -2.773 | 0.006 | -1.508 | -0.255 | . C(province)[T.Shandong] 0.6770 | 0.658 | 1.029 | 0.305 | -0.619 | 1.973 | . C(province)[T.Shanghai] -1.8249 | 0.361 | -5.057 | 0.000 | -2.536 | -1.114 | . C(province)[T.Shanxi] 0.0097 | 0.327 | 0.030 | 0.976 | -0.635 | 0.654 | . C(province)[T.Sichuan] 0.6499 | 0.280 | 2.323 | 0.021 | 0.099 | 1.201 | . C(province)[T.Tianjin] -2.0987 | 0.365 | -5.753 | 0.000 | -2.817 | -1.380 | . C(province)[T.Tibet] -2.5255 | 1.780 | -1.418 | 0.157 | -6.033 | 0.982 | . C(province)[T.Xinjiang] -0.8637 | 0.488 | -1.770 | 0.078 | -1.825 | 0.097 | . C(province)[T.Yunnan] 0.4095 | 0.303 | 1.349 | 0.178 | -0.188 | 1.007 | . C(province)[T.Zhejiang] 0.5181 | 0.496 | 1.045 | 0.297 | -0.459 | 1.495 | . C(year)[T.1997] -0.0257 | 0.186 | -0.138 | 0.890 | -0.393 | 0.341 | . C(year)[T.1998] 0.2804 | 0.204 | 1.377 | 0.170 | -0.121 | 0.682 | . C(year)[T.1999] 0.6743 | 0.227 | 2.965 | 0.003 | 0.226 | 1.122 | . C(year)[T.2000] 0.3478 | 0.269 | 1.294 | 0.197 | -0.182 | 0.877 | . C(year)[T.2001] 0.5209 | 0.315 | 1.654 | 0.099 | -0.100 | 1.141 | . C(year)[T.2002] 0.7849 | 0.363 | 2.159 | 0.032 | 0.069 | 1.501 | . C(year)[T.2003] 0.9626 | 0.433 | 2.222 | 0.027 | 0.109 | 1.816 | . C(year)[T.2004] 1.4262 | 0.523 | 2.727 | 0.007 | 0.396 | 2.456 | . C(year)[T.2005] 1.5019 | 0.608 | 2.471 | 0.014 | 0.305 | 2.699 | . C(year)[T.2006] 1.8657 | 0.690 | 2.705 | 0.007 | 0.507 | 3.224 | . C(year)[T.2007] 2.6363 | 0.791 | 3.332 | 0.001 | 1.078 | 4.195 | . np.log(gdp) -0.3958 | 0.558 | -0.709 | 0.479 | -1.495 | 0.704 | . np.log(fdi) 0.0478 | 0.059 | 0.805 | 0.422 | -0.069 | 0.165 | . i 0.7234 | 0.228 | 3.173 | 0.002 | 0.274 | 1.172 | . rnr -0.3038 | 0.231 | -1.316 | 0.189 | -0.759 | 0.151 | . rr -0.0866 | 0.259 | -0.334 | 0.738 | -0.597 | 0.424 | . Omnibus: 80.714 | Durbin-Watson: 0.946 | . Prob(Omnibus): 0.000 | Jarque-Bera (JB): 882.106 | . Skew: 0.780 | Prob(JB): 2.84e-192 | . Kurtosis: 11.476 | Cond. No. 1.29e+18 | . Warnings:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.[2] The smallest eigenvalue is 3.26e-32. This might indicate that there arestrong multicollinearity problems or that the design matrix is singular. coef_df = pd.read_csv(&#39;coef.csv&#39;) fig, ax = plt.subplots(figsize=(16, 10)) coef_df.plot(x=&#39;varname&#39;, y=&#39;coef&#39;, kind=&#39;bar&#39;, ax=ax, color=&#39;none&#39;, yerr=&#39;err&#39;, legend=False) ax.set_ylabel(&#39;Percentage Imapact upon Specific Purpose Transfers&#39;) ax.set_xlabel(&#39;Features&#39;) ax.scatter(x=pd.np.arange(coef_df.shape[0]), marker=&#39;s&#39;, s=120, y=coef_df[&#39;coef&#39;], color=&#39;black&#39;) ax.axhline(y=0, linestyle=&#39;--&#39;, color=&#39;blue&#39;, linewidth=4) ax.xaxis.set_ticks_position(&#39;none&#39;) _ = ax.set_xticklabels([&#39;GDP&#39;, &#39;FDI&#39;, &#39;Incumbent&#39;, &#39;Non Relevant Rival&#39;, &#39;Relevant Rival&#39;], rotation=0, fontsize=20) fs = 16 ax.annotate(&#39;Controls&#39;, xy=(0.2, -0.2), xytext=(0.2, -0.3), xycoords=&#39;axes fraction&#39;, textcoords=&#39;axes fraction&#39;, fontsize=fs, ha=&#39;center&#39;, va=&#39;bottom&#39;, bbox=dict(boxstyle=&#39;square&#39;, fc=&#39;white&#39;, ec=&#39;blue&#39;), arrowprops=dict(arrowstyle=&#39;-[, widthB=5.5, lengthB=1.2&#39;, lw=2.0, color=&#39;blue&#39;)) _ = ax.annotate(&#39;Connections&#39;, xy=(0.7, -0.2), xytext=(0.7, -0.3), xycoords=&#39;axes fraction&#39;, textcoords=&#39;axes fraction&#39;, fontsize=fs, ha=&#39;center&#39;, va=&#39;bottom&#39;, bbox=dict(boxstyle=&#39;square&#39;, fc=&#39;white&#39;, ec=&#39;red&#39;), arrowprops=dict(arrowstyle=&#39;-[, widthB=10.5, lengthB=1.2&#39;, lw=2.0, color=&#39;red&#39;)) . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt;",
            "url": "https://davidrkearney.github.io/Kearney_Data_Science/2020/08/20/econ.html",
            "relUrl": "/2020/08/20/econ.html",
            "date": " • Aug 20, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Data Science, Big Data and Healthcare Research",
            "content": "Data Science, Big Data and Healthcare Research . This post will consider the use of hive, spark, and for machine learning pipelines and workflows. Here’s a footnote 1. . Footnotes . links &#8617; . |",
            "url": "https://davidrkearney.github.io/Kearney_Data_Science/markdown/2020/06/08/1st-markdown-post.html",
            "relUrl": "/markdown/2020/06/08/1st-markdown-post.html",
            "date": " • Jun 8, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Title",
            "content": "# &quot;# Calculating time with machine learning functions&quot; &gt; &quot;Calculating time with machine learning functions&quot; - toc:true- branch: master- badges: true- comments: true - author: DRK - categories: [jupyter] . &quot;&quot;&quot;A timer for ML functions&quot;&quot;&quot; . &#39;A timer for ML functions&#39; . #collapse-hide from functools import wraps import time def timer(func): &quot;&quot;&quot;[This decorator is a timer for functions] Args: func ([function]): [This decorator takes a function as argument] Returns: [string]: [states the duration of time between the function begining and ending] &quot;&quot;&quot; @wraps(func) def wrapper(*args, **kwargs): print(f&quot;{func.__name__!r} begins&quot;) start_time = time.time() result = func(*args, **kwargs) print(f&quot;{func.__name__!r} ends in {time.time()-start_time} secs&quot;) return result return wrapper . . @timer def model_metrics(*args, **kwargs): &quot;&quot;&quot;[This is a function to print model metrics of interest] &quot;&quot;&quot; print(&quot;Model ID Number:&quot;, args) print(&quot;Metric of Interest:&quot;, kwargs) model_metrics(1, 2, 10, key=&quot;word&quot;, key2=&quot;word2&quot;, numtrees=&quot;200&quot;) . from collections import Counter import math, random # # data splitting # def split_data(data, prob): &quot;&quot;&quot;split data into fractions [prob, 1 - prob]&quot;&quot;&quot; results = [], [] for row in data: results[0 if random.random() &lt; prob else 1].append(row) return results def train_test_split(x, y, test_pct): data = list(zip(x, y)) # pair corresponding values train, test = split_data(data, 1 - test_pct) # split the dataset of pairs x_train, y_train = list(zip(*train)) # magical un-zip trick x_test, y_test = list(zip(*test)) return x_train, x_test, y_train, y_test # # correctness # def accuracy(tp, fp, fn, tn): correct = tp + tn total = tp + fp + fn + tn return correct / total def precision(tp, fp, fn, tn): return tp / (tp + fp) def recall(tp, fp, fn, tn): return tp / (tp + fn) def f1_score(tp, fp, fn, tn): p = precision(tp, fp, fn, tn) r = recall(tp, fp, fn, tn) return 2 * p * r / (p + r) if __name__ == &quot;__main__&quot;: print(&quot;accuracy(70, 4930, 13930, 981070)&quot;, accuracy(70, 4930, 13930, 981070)) print(&quot;precision(70, 4930, 13930, 981070)&quot;, precision(70, 4930, 13930, 981070)) print(&quot;recall(70, 4930, 13930, 981070)&quot;, recall(70, 4930, 13930, 981070)) print(&quot;f1_score(70, 4930, 13930, 981070)&quot;, f1_score(70, 4930, 13930, 981070)) . favorite_number = 7 def add(a, b): return a + b def sub(a, b): return a - b def multiply(a, b): return a * b def divide(a, b): return a / b def count_vowels(word): count = 0 for letter in word.lower(): count += letter in &#39;aeiou&#39; return count . import example_module as sm print(sm.favorite_number) # add two numbers together print(sm.add(3, 8)) # count the number of vowels in a string print(sm.count_vowels(&#39;Testing&#39;)) . import pandas as pd from alive_progress import alive_bar, showtime, show_bars, show_spinners, config_handler config_handler.set_global(theme=&#39;ascii&#39;, spinner=&#39;notes&#39;, bar=&#39;solid&#39;) with alive_bar(3) as bar: df = pd.read_csv(&#39;../../data/csvs/example.csv&#39;) bar(&#39;file read, printing file&#39;) print(df.head) bar(&#39;data printed ok, printing methods of data&#39;) print(dir(df)) bar(&#39;process complete&#39;) . FileNotFoundError Traceback (most recent call last) &lt;ipython-input-3-24a2950a8375&gt; in &lt;module&gt; 4 5 with alive_bar(3) as bar: -&gt; 6 df = pd.read_csv(&#39;../../data/csvs/example.csv&#39;) 7 bar(&#39;file read, printing file&#39;) 8 print(df.head) ~/anaconda3/envs/insight/lib/python3.7/site-packages/pandas/io/parsers.py in parser_f(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, dialect, error_bad_lines, warn_bad_lines, delim_whitespace, low_memory, memory_map, float_precision) 674 ) 675 --&gt; 676 return _read(filepath_or_buffer, kwds) 677 678 parser_f.__name__ = name ~/anaconda3/envs/insight/lib/python3.7/site-packages/pandas/io/parsers.py in _read(filepath_or_buffer, kwds) 446 447 # Create the parser. --&gt; 448 parser = TextFileReader(fp_or_buf, **kwds) 449 450 if chunksize or iterator: ~/anaconda3/envs/insight/lib/python3.7/site-packages/pandas/io/parsers.py in __init__(self, f, engine, **kwds) 878 self.options[&#34;has_index_names&#34;] = kwds[&#34;has_index_names&#34;] 879 --&gt; 880 self._make_engine(self.engine) 881 882 def close(self): ~/anaconda3/envs/insight/lib/python3.7/site-packages/pandas/io/parsers.py in _make_engine(self, engine) 1112 def _make_engine(self, engine=&#34;c&#34;): 1113 if engine == &#34;c&#34;: -&gt; 1114 self._engine = CParserWrapper(self.f, **self.options) 1115 else: 1116 if engine == &#34;python&#34;: ~/anaconda3/envs/insight/lib/python3.7/site-packages/pandas/io/parsers.py in __init__(self, src, **kwds) 1889 kwds[&#34;usecols&#34;] = self.usecols 1890 -&gt; 1891 self._reader = parsers.TextReader(src, **kwds) 1892 self.unnamed_cols = self._reader.unnamed_cols 1893 pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader.__cinit__() pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader._setup_parser_source() FileNotFoundError: [Errno 2] File ../../data/csvs/example.csv does not exist: &#39;../../data/csvs/example.csv&#39; . from functools import wraps import time def timer(func): &quot;&quot;&quot;[This decorator is a timer for functions] Args: func ([function]): [This decorator takes a function as argument] Returns: [string]: [states the duration of time between the function begining and ending] &quot;&quot;&quot; @wraps(func) def wrapper(*args, **kwargs): print(f&quot;{func.__name__!r} begins&quot;) start_time = time.time() result = func(*args, **kwargs) print(f&quot;{func.__name__!r} ends in {time.time()-start_time} secs&quot;) return result return wrapper @timer def model_metrics(*args, **kwargs): &quot;&quot;&quot;[This is a function to print model metrics of interest] &quot;&quot;&quot; print(&quot;Model ID Number:&quot;, args) print(&quot;Metric of Interest:&quot;, kwargs) model_metrics(1, 2, 10, key=&quot;word&quot;, key2=&quot;word2&quot;, numtrees=&quot;200&quot;) .",
            "url": "https://davidrkearney.github.io/Kearney_Data_Science/2020/06/07/kwargs-decorators.html",
            "relUrl": "/2020/06/07/kwargs-decorators.html",
            "date": " • Jun 7, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "ML Metrics",
            "content": "Front Matter . # &quot;# ML Metrics&quot; &gt; &quot;Metrics for ml models&quot; - toc:true- branch: master- badges: true- comments: true - author: - categories: [jupyter] . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 | The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 | First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 | I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 | Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 | Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://davidrkearney.github.io/Kearney_Data_Science/2020/02/20/test.html",
            "relUrl": "/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://davidrkearney.github.io/Kearney_Data_Science/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://davidrkearney.github.io/Kearney_Data_Science/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://davidrkearney.github.io/Kearney_Data_Science/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}